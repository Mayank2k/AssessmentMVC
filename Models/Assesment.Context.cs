//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssessmentMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AssesmentContext : DbContext
    {
        public AssesmentContext()
            : base("name=AssesmentContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Board> Boards { get; set; }
        public virtual DbSet<Chapter> Chapters { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Competency> Competencies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<DifficultyLevel> DifficultyLevels { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<LearningLevel> LearningLevels { get; set; }
        public virtual DbSet<LearningObjective> LearningObjectives { get; set; }
        public virtual DbSet<LearningOutcome> LearningOutcomes { get; set; }
        public virtual DbSet<Misconception> Misconceptions { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderMaster> OrderMasters { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCourse> ProductCourses { get; set; }
        public virtual DbSet<QuestionTag> QuestionTags { get; set; }
        public virtual DbSet<QuestionType> QuestionTypes { get; set; }
        public virtual DbSet<RoleType> RoleTypes { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<SubSkill> SubSkills { get; set; }
        public virtual DbSet<SubTopic> SubTopics { get; set; }
        public virtual DbSet<TestCycle> TestCycles { get; set; }
        public virtual DbSet<TestPaperSection> TestPaperSections { get; set; }
        public virtual DbSet<TestPaperSectionQuestion> TestPaperSectionQuestions { get; set; }
        public virtual DbSet<TestPaperSet> TestPaperSets { get; set; }
        public virtual DbSet<TestResult> TestResults { get; set; }
        public virtual DbSet<TestResultDetail> TestResultDetails { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserMapping> UserMappings { get; set; }
        public virtual DbSet<QuestionOption> QuestionOptions { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<TestPaper> TestPapers { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Phone> Phones { get; set; }
        public virtual DbSet<QuestionMaster> QuestionMasters { get; set; }
    
        [DbFunction("AssesmentContext", "fnCompetencyBasedScore")]
        public virtual IQueryable<fnCompetencyBasedScore_Result> fnCompetencyBasedScore(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> classID, string sectionID, Nullable<int> subjectID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID != null ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(string));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCompetencyBasedScore_Result>("[AssesmentContext].[fnCompetencyBasedScore](@SchoolID, @UserID, @ClassID, @SectionID, @SubjectID)", schoolIDParameter, userIDParameter, classIDParameter, sectionIDParameter, subjectIDParameter);
        }
    
        [DbFunction("AssesmentContext", "fnCompetencyWiseScore")]
        public virtual IQueryable<fnCompetencyWiseScore_Result> fnCompetencyWiseScore(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> classID, string sectionID, Nullable<int> subjectID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID != null ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(string));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCompetencyWiseScore_Result>("[AssesmentContext].[fnCompetencyWiseScore](@SchoolID, @UserID, @ClassID, @SectionID, @SubjectID)", schoolIDParameter, userIDParameter, classIDParameter, sectionIDParameter, subjectIDParameter);
        }
    
        [DbFunction("AssesmentContext", "fnDifficultyLevelBasedScore")]
        public virtual IQueryable<fnDifficultyLevelBasedScore_Result> fnDifficultyLevelBasedScore(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> classID, string sectionID, Nullable<int> subjectID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID != null ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(string));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnDifficultyLevelBasedScore_Result>("[AssesmentContext].[fnDifficultyLevelBasedScore](@SchoolID, @UserID, @ClassID, @SectionID, @SubjectID)", schoolIDParameter, userIDParameter, classIDParameter, sectionIDParameter, subjectIDParameter);
        }
    
        [DbFunction("AssesmentContext", "fnDifficultyLevelWiseScore")]
        public virtual IQueryable<fnDifficultyLevelWiseScore_Result> fnDifficultyLevelWiseScore(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> classID, string sectionID, Nullable<int> subjectID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID != null ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(string));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnDifficultyLevelWiseScore_Result>("[AssesmentContext].[fnDifficultyLevelWiseScore](@SchoolID, @UserID, @ClassID, @SectionID, @SubjectID)", schoolIDParameter, userIDParameter, classIDParameter, sectionIDParameter, subjectIDParameter);
        }
    
        [DbFunction("AssesmentContext", "fnSubjectBasedScore")]
        public virtual IQueryable<fnSubjectBasedScore_Result> fnSubjectBasedScore(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> classID, string sectionID, Nullable<int> subjectID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID != null ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(string));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSubjectBasedScore_Result>("[AssesmentContext].[fnSubjectBasedScore](@SchoolID, @UserID, @ClassID, @SectionID, @SubjectID)", schoolIDParameter, userIDParameter, classIDParameter, sectionIDParameter, subjectIDParameter);
        }
    
        [DbFunction("AssesmentContext", "fnSubjectWiseScore")]
        public virtual IQueryable<fnSubjectWiseScore_Result> fnSubjectWiseScore(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> classID, string sectionID, Nullable<int> subjectID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID != null ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(string));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSubjectWiseScore_Result>("[AssesmentContext].[fnSubjectWiseScore](@SchoolID, @UserID, @ClassID, @SectionID, @SubjectID)", schoolIDParameter, userIDParameter, classIDParameter, sectionIDParameter, subjectIDParameter);
        }
    }
}
